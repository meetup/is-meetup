#!/bin/bash
#
# update-ghpages.bash
# Used for updating the gh-pages standalone branch. Split out from
# the `build.bash` script to avoid unintentional commits.
# During the `make-release.bash` script, this should probably also
# be called for the sake of completeness.

# IMPORTS
source /usr/local/bin/tputcolors

# VARS
FONT_BUILD_DIR="font"
SASS_DIR="sass"
CSS_DIR="css"
INCLUDES_DIR="_includes"
CORE_SASS_FILE="_red-label-core.scss"
SASS_FILE="red-label.scss"
# meetup-swatches is an implicit dependency, available with sassquatch
# for gh-pages, we use bower to load the latest meetup-swatches into the repo
SWATCHES_PATH="bower_components/meetup-swatches/sass/colors.scss"

ASSET_PATH='.'
ICON_ARRAY_FILE='iconArray.html'
VERSION_NUMBER_FILE='versionNumber.html'
ASSET_PATH_FILE='assetPath.html'

branch_name=$(git rev-parse --abbrev-ref HEAD)
is_branch_dirty=$(git diff --shortstat 2> /dev/null | tail -n1)
version_number=$(grep -io 'version.*' bower.json | grep -io '[0-9]\.[0-9]\.[0-9]')
is_feature_branch=false


# =============================================================================
# {

echo
echo "${t_white}${t_bold}Updating gh-pages branch.${t_reset}"
echo


# Check if current branch is dirty.
echo "Checking current branch status..."
if [[ $is_branch_dirty != "" ]]; then
    error "Current branch is dirty." "Commit all changes before creating a release (don't want to forget anything."
    echo
    exit 1
fi
success "Current branch is clean."
echo



# Check if current branch is master.
# We should only update red-label/index.html if we're running this script
# from red-label/master. Otherwise, we should create a spec sheet for QA
# testing, which uses the branch name as the html file name.
if [ $branch_name != "master" ]; then
    is_feature_branch=true
    echo "Creating a branch-specific github page..."
else
    echo "Updating master documentation on github pages..."
fi



# TRANSFER STATIC FILES
# Do a manual move, since there's not really a huge need for having the complete
# version history.
# Moves the fonts, and the static CSS file.
echo "Moving all files needed for transfer out of $branch_name..."
mkdir -p ~/$FONT_BUILD_DIR
cp $FONT_BUILD_DIR/* ~/$FONT_BUILD_DIR
mkdir -p ~/$SASS_DIR
cp $SASS_DIR/* ~/$SASS_DIR



# SWITCH TO GH-PAGES BRANCH
# Also, pull from remote to make sure there aren't any issues and that
# everything is actually up to date.
echo "Switching to red-label/gh-pages branch..."
git checkout gh-pages > /dev/null 2>&1
echo "Updating gh-pages from origin..."
git pull origin gh-pages > /dev/null 2>&1
echo "Updating color dependency"
bower update meetup-swatches > /dev/null 2>&1

# FEATURE BRANCH TASKS
# If you're on a feature branch, we're going to create a special dir to store
# feature-branch specific tests AND make a copy of the index page.
if [ $is_feature_branch == true ]; then
    echo "Copying assets to make a new subpage..."
    ASSET_PATH="branches/"$branch_name
    mkdir -p $ASSET_PATH
    cp index.html $ASSET_PATH/index.html
    mkdir -p $INCLUDES_DIR/$ASSET_PATH
fi


# MOVE STATIC ASSETS OVER
# We need sass and font files we just moved.
echo "Copying font files from $branch_name..."
rm -rf $ASSET_PATH/$FONT_BUILD_DIR
mv ~/$FONT_BUILD_DIR $ASSET_PATH/$FONT_BUILD_DIR

echo "Copying sass files from $branch_name..."
rm -rf $ASSET_PATH/$SASS_DIR
mv ~/$SASS_DIR $ASSET_PATH/$SASS_DIR


# Sed out the $PATH variable in duplicate and replace it with a local ../font/ URL
echo "Inserting color import..."
bower update meetup-swatches > /dev/null 2>&1
echo -e "@import '$SWATCHES_PATH';\n$(cat $ASSET_PATH/$SASS_DIR/$SASS_FILE)" > $ASSET_PATH/$SASS_DIR/$SASS_FILE

echo "Rewriting @font-face paths..."
sed 's/^$PATH.*/$PATH\: "..\/font\/";/g' < $ASSET_PATH/$SASS_DIR/$SASS_FILE \
    > $ASSET_PATH/$SASS_DIR/tmp

rm $ASSET_PATH/$SASS_DIR/$SASS_FILE
mv $ASSET_PATH/$SASS_DIR/tmp $ASSET_PATH/$SASS_DIR/$SASS_FILE

# Compile CSS
echo "Compiling Sass => CSS..."
mkdir -p $ASSET_PATH/$CSS_DIR
sass $ASSET_PATH/$SASS_DIR/$SASS_FILE:$ASSET_PATH/$CSS_DIR/$(basename $SASS_FILE .scss).css

if [ $? -ne 0 ]; then
    error "Sass failed to compile to CSS." "Check to make sure you have the sass gem installed."
    echo "Resetting gh-pages branch..."
    git reset --hard HEAD > /dev/null 2>&1
    echo "Returning to previous branch and exiting."
    git checkout $branch_name > /dev/null 2>&1
    echo
    exit 1
fi


# CREATE VARIABLE FILES
# Create icon csv array for Liquid Templating
# 1.    Get all quoted statements inside sass @icon() declarations
# 2.    Strip the @icon( statement
# 3.    Swap newlines into commas
# 4, 5. Remove all quotes
# 6.    Prepend Liquid Templating Assignment
# 7.    Append Liquid templating splitting, write to file.
echo "Creating icon array for Liquid Templates..."
grep -io "@include icon(\'[[:alnum:]-]*\'" $ASSET_PATH/$SASS_DIR/$CORE_SASS_FILE | \
    sed 's/@include icon(//' | \
    tr "\\n" ", " | \
    sed "s/\'//g" | \
    sed 's/\"//g' | \
    sed "s/^/{% assign icons = \'/" | \
    sed "s/$/' | split: \',\' %}/" > $INCLUDES_DIR/$ASSET_PATH/$ICON_ARRAY_FILE


# Create a version variable for Liquid Templating.
echo "Creating version file for Liquid Templates..."
echo "{% assign rlVersion = '$version_number' %}" > $INCLUDES_DIR/$ASSET_PATH/$VERSION_NUMBER_FILE


# Sed through $ASSET_PATH/index.html to make resources point to stuff inside
# the $ASSET_PATH directory we just made.
if [ $is_feature_branch == true ]; then
    echo "Updating asset paths in index.html..."
    sed "s iconArray $ASSET_PATH/iconArray g" < $ASSET_PATH/index.html | \
        sed "s versionNumber $ASSET_PATH/versionNumber g" | \
        sed "s css/ \.\./\.\./css/ g" | \
        sed "s \.\./\.\./css/red-label css/red-label g" > $ASSET_PATH/tmp
    mv $ASSET_PATH/tmp $ASSET_PATH/index.html
fi


# Rebuild Jekyll
echo "Rebuilding Jekyll..."
jekyll build > /dev/null 2>&1

if [ $? -ne 0 ]; then
    error "Jekyll failed during the build operation." "Check to make sure you have jekyll installed."
    echo
    exit 1
fi
success
echo


# GITHUB UPDATING
echo "Committing and pushing changes to github"

# Commit changes to gh-pages
git add . > /dev/null 2>&1
git commit -m '[update-ghpages script] Update gh-pages documentation' > /dev/null 2>&1

# Push to github.
git push origin gh-pages > /dev/null 2>&1
success
echo

# Switch back to master
echo "Returning to $branch_name..."
git checkout $branch_name > /dev/null 2>&1

success "Done."
echo

echo "${t_white}${t_bold}Github may take up to 10m to rebuild the gh-page branch."

if [ $is_feature_branch == true ]; then
    echo "See changes at     http://meetup.github.io/red-label/branches/$branch_name/${t_reset}"
else
    echo "See changes at     http://meetup.github.io/red-label/${t_reset}"
fi
echo

# }
# =============================================================================
